package c4s.calculations.projecteuler;

import java.util.stream.IntStream;

/**
 * 
 * @author Damian
 */
public class Solutions {

    /**
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
        The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
     * @return calculated value - iteration
     */

    public long problem_001_VerIterate() {
        long ret = 0;

        //Implementation
        for (int i = 1; i < 1000; i++) {
            if (i % 3 == 0 || i % 5 == 0) {
                ret += i;
            }
        }
        
        return ret;
    }

    public long problem_001_VerStream() {
        long ret = 0;

        //Implementation
        ret = IntStream.range(1, 1000)
                .filter(i -> i % 3 == 0 || i % 5 == 0)
                .sum();

        return ret;
    }

    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     * @return calculated value
     */

    public long problem_002_VerIterate() {
        long ret = -1;

        //Implementation
        ret = calculateFibonacci(2, 1, 2);
        
        return ret;
    }
    
    public long calculateFibonacci(long total, long val1, long val2) {
        long result = val1 + val2;
        if (result > 4000000) {
            return total;
        } else {
            if (result % 2 == 0) {
                total += result;
            }
            return calculateFibonacci(total, val2, result);    
        }
    }
    
    /**/
    public long problem_003() {
        long ret = -1;
        
        return ret;
    }
}
